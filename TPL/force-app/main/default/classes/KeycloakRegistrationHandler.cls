/*
* Company: CGI for BC Ministry of Health
* Date: March 31, 2021
* Author: German (Herman) Ovodov, Roy Poystila
* Description: global class KeycloakRegistrationHandler implements Auth.RegistrationHandler
*    Autogenerated by Salesforce, Registration Handler class for Keycloak
*    Attributes:
*         NONE
*    Methods:
*         global boolean canCreateUser(Auth.UserData data): Autogenerated, verifies if a new user should be created based on provided data
*         global User createUser(Id portalId, Auth.UserData data): Autogenerated, creates new user
*         global void updateUser(Id userId, Id portalId, Auth.UserData data): Autogenerated, updates existing user
*
* History:
*     Initial version: March 31, 2021 - GO
*     Updates to codebase: May 1, 2021 - RP
*/

global class KeycloakRegistrationHandler implements Auth.RegistrationHandler{
    
    global boolean canCreateUser(Auth.UserData data) {
    /*
     * Description: Autogenerated by Salesforce, verifies if a new user should be created based on provided data
     * Parameters:
     *     Auth.UserData data: UserData id token payload, including attributeMap representing the id token
     * Returns:
     *     Boolean: true = user does not exist, create new user; false = user exists, do not create new user
     * 
     */
        system.debug('data:'+ json.serializePretty(data));
        system.debug('roles:'+ json.serializePretty(data.attributeMap.get('roles')));
        boolean isUserCreate = false;
        
        User[] fetchExistingUser = [Select Id, FederationIdentifier FROM User where FederationIdentifier =: data.username Limit 1];
        if (fetchExistingUser.size() == 0)
        {
            isUserCreate = true;
        }

        return isUserCreate ;
    }
    
    global User createUser(Id portalId, Auth.UserData data){
    /*
     * Description: Autogenerated by Salesforce, creates new user
     * Parameters:
     *     Id portalId: Id of the portal (community) where the request originated from
     *     Auth.UserData data: UserData id token payload, including attributeMap representing the id token
     * Returns:
     *     User: User object representing new user, returns null if user already exists
     * 
     */
        User matchUser = new User();
        if(canCreateUser(data)) {
            //Returning null or throwing an exception fails the SSO flow
            matchUser = UserRegistrationService.createUser(portalId, data);
        } else {
            for (User fetchExistingUser : [Select Id, FederationIdentifier FROM User where FederationIdentifier =: data.username Limit 1])
            {
                matchUser = UserRegistrationService.updateUser(fetchExistingUser.Id, portalId, data);
            }
            
        }
    
        return matchUser;
        
    }
    
    global void updateUser(Id userId, Id portalId, Auth.UserData data){
    /*
     * Description: Autogenerated by Salesforce, updates existing user
     * Parameters:
     *     Id userId: Id of the existing user
     *     Id portalId: Id of the portal (community) where the request originated from
     *     Auth.UserData data: UserData id token payload, including attributeMap representing the id token
     * Returns:
     *     Void
     * 
     */
        UserRegistrationService.updateUser(userId, portalId, data);
    }
    }